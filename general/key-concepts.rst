.. role:: strike
  :class: strike

******************
Ключевые концепции
******************

.. _key-concepts-async:

Непротивление асинхронности
===========================

Javascript --- язык, в котором линейные программы практически не пишутся. Как в среде Node.js, так и в браузерах, в
основе лежит событийная модель (event-loop) и в результате две соседние строчки кода могут выполняться в любом
порядке. Это чем-то напоминает многопоточное программирование, но всё же проще, поскольку здесь поток один и для
доступа к какому-либо объекту не требуется использовать примитивы синхронизации.

Поскольку в Javascript-программирование многие приходят из мира линейного программирования или новички, многие
фреймворки пытаются максимально уберечь разработчиков от сложности асинхронной кухни. Однако, авторы CordJS, считают,
что в среде, которая в принципе не поддерживает синхронное программирование (браузер), разработчик рано или поздно
сталкивается с сюрпризами, и непонимание принципов асинхронной работы будет только вредить.

Поэтому CordJS не пытается скрывать асинхронность, а напротив делает её явной, но повсеместно использует инструмент,
который при правильном подходе позволяет работать в асинхронной среде без боли --- *промисы* (promise) --- специальную
абстракцию, в которую "заворачивается" результат асинхронного вычисления, которую можно возвращать в виде результата,
передавать, комбинировать с другими и т.д.

В современном Javascript'е использование промисов уже достаточно распространено, существует даже соответствующий
стандарт. Исторически сложилось, что в CordJS родилась и используется :strike:`велосипед` собственная реализация
промисов под названием ``Future`` (inspired by Scala).

.. _key-concepts-isomorph:

Изоморфность
============

Одна из особенностей, ради которых создавался фреймворк CordJS --- возможность рендерить страницу и на сервере, и в
режиме SPA на браузере, используя при этом один и тот же код. Такое свойство называется модным словом *изоморфность*.
В этом разделе приведено короткое описание того, как это работает.

Серверная часть CordJS выполняет одну главную задачу --- отрендерить и отдать браузеру первую запрошенную страницу
интерфейса. Все дальнейшие переходы в рамках этого окна (таба) браузера происходят на стороне браузера, из серверной
части только запрашиваются js- и css-файлы очередных виджетов.

Сложность заключается в том, что простой html-разметки страницы, которая получается в результате серверного
рендеринга, недостаточно, чтобы на браузере заработала вся магия CordJS. В процессе рендеринга страницы создаётся
много виджетов, у каждого из которых своё уникальное состояние, отношения родитель-дочка, подписки на события и т.д.

CordJS оживляет страницу после передачи на браузер следующим образом: состояние всех виджетов, участвовавших в
рендеринге страницы, сериализуется и генерируется специальный инициализирующий js-код, который вставляется прямо в
тело передаваемой html-страницы с помощью плагина шаблонизатора :ref:`#widgetInitializer`.

Как только страница загрузилась в браузер и возникло событие DOM ready, CordJS вызывает этот инициализирующий код,
который воссоздаёт все виджеты с тем же состоянием, что и на сервере, плюс инициализирует behavour-классы и
привязывает их к соответствующим DOM-элементам на странице.

К сожалению, процесс инициализации может занимать несколько секунд (в зависимости от производительности железа и
сложности страницы), и, несмотря на то что пользователь полностью видит контент страницы, полноценное интеракцивное
взаимодействие с ней (переход на другой экран, нажатие на кнопку и т.п.) возможны только после завершения
инициализации.
