***************
Система бандлов
***************

**Бандл** (Bundle) --- структурированный определённым образом неделимый модуль с исходниками. Разделение проекта на
бандлы по принципу функциональных модулей помогает легче ориентироваться в нём разработчику. Кроме того, такая система
позволяет компоновать различные приложения из разных комбинаций бандлов.


Пространства имён и структура папки ``public/bundles``
======================================================

Все бандлы в проекте на CordJS располагаются в папке ``public/bundles``. Чтобы избежать конфликтов имён, структура
этой папки не плоская и введено понятие **пространства имён**.

Рекомендуется на первом уровне создать папку, которая определяет уникальное пространство имён компании, например
``megaplan`` или ``apple``. На втором уровне можно уже размещать папки непосредственных бандлов, но это не
обязательно. В некоторых случаях, если планируется разрабатываеть несколько приложений, у которых будут как
собственные бандлы, так и общие, стоит ввести пространства имён второго уровня, например ``megaplan/common``,
``megaplan/mobile`` и ``megaplan/web``.

Таким образом, название бандла складывается из названий папок пространсва имён и названия папки самого бандла, например
``megaplan/common/user`` или ``cord/core``.


Конфигурация набора включённых бандлов
======================================

CordJS определяет какие папки являются бандлами, которые должны работать в данном приложении, довольно простым
образом: они просто перечислены в специальном конфирурационном файле ``public/app/application.coffee``:

.. code-block:: coffee
  :linenos:
  :caption: public/app/application.coffee

  define -> [
    'megaplan/common/user'
    'hello/example'
  ]

Папки, перечисленные в этом массиве, считаются бандлами и обязаны содержать в себе специальный конфиругационный файл
бандла (об этом ниже).

.. note::

  Бандл ``cord/core`` в ``application.coffee`` перечилять не нужно. Он всегда добавляется автоматически.


Альтернативные конфигурации
---------------------------

В случае, если в рамках одного проекта (репозитория исходников) разрабатывается несколько приложений, то в папке
``public/app`` можно создать альтернативные конфигурации бандлов, например:

.. code-block:: coffee
  :linenos:
  :caption: public/app/mobile.coffee

  define -> [
    'megaplan/common/user'
    'megaplan/mobile/common'
    'megaplan/mobile/inbox'
  ]

Для того, чтобы сборщик использовал альтернативную конфигурацию, необходимо пересобрать проект с использованием опции
``-A``:

.. code-block:: bash

  cordjs run -w -C -A mobile

Одновременно разрабатывать в режиме отладки обе конфигурации в рамках одного дерева исходников не получится.


Структура бандла
================

С точки зрения файловой системы, бандл в CordJS, выглядит примерно так:

.. code-block:: bash

  assets/
    favicon.ico
  models/
    UserRepo.coffee
  services/
    TimeZone.coffee
  widgets/
    someWidget/
      ...
  config.coffee

Единственный обязательный файл бандла --- ``config.coffee`` --- файл конфигурации бандла, о котором пойдёт речь в
следующем разделе.

В папке ``assets`` следует хранить бандла ресурсы (например, картинки), на которые браузер будет ссылаться as-is.

В папке ``models`` содержатся исходники классов, относящихся к слою работы с данными (Model) --- репозитории,
коллекции и собственно сущности (модели). Эта папка поддерживается на уровне фреймворка --- к файлам внутри неё можно
писать укороченные канонические пути через плагин ``cord-m!`` (см. главу про requirejs).

Папка ``services`` не является регламентированной. По соглашению, в ней следует размещать исходники всех сервисов, не
подпадающих в другие категории, регистрируемых в DI контейнере.

Папка ``widgets`` обычно содержит в себе большую часть исходников бандла --- в ней должны быть размещены все виджеты
бандла. Все сокращённые канонические пути к виджетам "раскрываются" в неё.


Конфигурационный файл бандла
============================

Конфигурационный файл бандла представляет собой AMD-модуль, который возвращает объект с конфигурацией бандла. Объект
может содержать следующие ключи:

* ``routes`` --- конфигурация роутов, которые реализует данный бандл. Подсистеме роутов посвящена отдельная глава:
  :doc:`routes`.

* ``services`` --- конфигурация сервисов, реализуемых данных бандлом, чтобы они были доступны из системного
  контейнера сервисов. О подсистеме DI читайте главу: :doc:`di`.

* ``requirejs`` --- доп-конфигурация для RequireJS. Обычно это конфигурация алиасов для используемых в этом бандле
  внешних библиотек. Подробнее об этом читайте :ref:`requirejs-config`.

* ``fallbackRoutes`` --- роуты, которые срабатывают в случае ошибки при перехода на данную страницу. Обычно они
  показывают виджет с сообщением об ошибке.

* ``fallbackApiErrors`` --- конфигурация роутинга --- на какую страницу автоматически перейти в случае определённой
  ошибки API при запросе к бекенду.

* ``fatalErrorPageFile`` --- путь к html-файлу относительно папки ``public``, который будет отображён в случае, если
  сереверный рендеринг завершился ошибкой и все другие fallback-методы тоже не сработали. Значение по умолчанию в
  бандле ``cord/core``: ``bundles/cord/core/assets/fatal-error.html``, но его можно переопределить в другом бандле.

* ``errorWidget`` --- канонический абсолютный путь к виджету, который должен отрендерить страницу с ошибкой в случае
  ошибки при серверном рендеринге. В параметрах этому виджету будут переданы исключение и информация о виджете
  страницы, которая не смогла отобразиться.

* ``proxyRoutes`` --- набор масок URL'ов, которые должны пропускаться к бекенду через встроенный в CordJS-сервер
  сервис кросс-доменного прокси (XDR-proxy).
