******************************
Обзор структуры проекта CordJS
******************************

С точки зрения файловой системы, проект, написанный на CordJS, выглядит примерно так:

.. code-block:: bash

  conf/
    default.js
    developer.js

  grunt/tasks/
    vendors.coffee

  node_modules/

  public/
    app/
      application.coffee

    bundles/

    vendor/

  target/

  Gruntfile.coffee
  optimizer-predefined-groups.coffee
  package.json
  server.coffee

Рассмотрим предназначение основных директорий и файлов...


``conf/`` --- "динамические" настройки фреймворка и бандлов (для админов)
=========================================================================

Папка ``conf`` предназначена для размещения js-файлов с динамическими настройками, которые могут быть изменены
системными администраторами, которые запускают и поддеживают приложение в продакшн, или разработчиками, которые
запускают приложение в режиме отладки.

В папке как минимум должен присутствовать файл ``default.js``. Он должен быть закомичен в репозиторий и не должен
изменяться. Он содержит все возможные конфигурационные переменные с описаниями и значениями по умолчанию. Все
остальные файлы конфигурации переопределяют значения из ``default.js``.

Подсистеме "пользовательских" настроек посвящена :doc:`Отдельная глава <settings>`.


``grunt/tasks/`` и ``Gruntfile.coffee`` --- автоматизация рутины разработчика
=============================================================================

Основные задачи автоматизации сборки и запуска приложения реализованы в CLI-утилите ``cordjs``. Однако в ходе
разработки конкретного проекта у разработчиков могут возникнут различные повторяемые действия, которые хочется
автоматизировать. `Grunt <http://gruntjs.com/>`_ --- отличный инструмент для реализации этой задачи. Папка
``grunt/tasks`` предназначена для coffee/js-файлов, описывающих grunt-задания, специфичные для данного проекта. В
``Gruntfile.coffee`` происходит подключение нужных grunt-задач их конфигурирование.

С помощью grunt-задачи легко также автоматизировать запуск тестов, подгрузку внешних зависимостей, сборку
phonegap-проекта и т.п.


``node_modules/`` и ``package.json`` --- npm зависимости
========================================================

Для подгрузки внешних зависимостей в CordJS используется `NPM <https://www.npmjs.com/>`_. В ``package.json`` следует
записывать описание зависимостей, которые после запуска ``npm install`` устанавливаются в папку ``node_modules``.
Модули из папки ``node_modules`` не следует комитить в репозиторий проекта, однако если в модуле произведены
изменения, которые не попали в основной проект зависимости, придётся закомитить и обновлять вручную.

Подробнее в разделе :doc:`external-deps`.


``public/`` --- то, что видит браузер
=====================================

Папка ``public`` является т.н. *document root* для веб-сервера CordJS, т.е. из браузера публично доступны все файлы
внутри папки ``public``. Папка ``conf`` вынесена за пределы ``public``, поскольку конфигурационные файлы могут
содержать пароли и ключи, которые не должны быть публично доступны.

Структура папки ``pulbic`` регламентирована.


``app/`` --- "статическая" конфигурация проекта
-----------------------------------------------

Папка ``public/app`` содержит главный конфигурационный файл приложения ``application.coffee``, в котором перечислены
включаемые :term:`бандлы <бандл>`. Если в рамках одного репозитория/проекта разрабатывается несколько приложений
(например, мобильное и веб), то в папке могут лежать альтернативные конфигурации приложений (например,
``mobile.coffee``), которые включаются с помощью опции ``-A`` сборщика ``cordjs``.

Подробнее о конфигурировании приложения читайте в главе :doc:`bundles`.


``assets/`` --- общие загружаемые ресурсы проекта
-------------------------------------------------

Если есть какие-то общие на весь проект загружаемые ресурсы (файлы, картинки), которым не нашлось места в одном из
бандлов, то их следует размещать в папке ``public/assets``. В папку ``public/assets/z`` оптимизатор ``cordjs`` кладёт
объединённые и сжатые js- и css-файлы.


``bundles/`` --- весь "рабочий" код здесь
-----------------------------------------

Папка ``public/bundles`` является корнем пространства имён всех сущностей, разрабатываемых конечным разработчиком в
рамках фреймворка CordJS. Корневое пространство имён для канонических имён CordJS именно здесь. Дальнейшая структура
исходников в рамках этой папки описана в главе :doc:`bundles`.


``vendor/`` --- внешние библиотеки для браузера
-----------------------------------------------

Папка ``public/vendor`` предназначена для размещения внешних библиотек, от которых зависит проект и которые
загружаются из браузера. Эта папка отдельна от ``node_modules``, поскольку, во-первых, не все библиотеки, работающие
в браузере, имеют версии для Node.js и наоборот, а во-вторых, CordJS использует в браузере схему загрузки модулей
:abbr:`AMD (Asynchronous Module Definition)`, а в Node.js используется CommonJS, поэтому, зачастую, одна и та же
библиотека имеет две разные модификации для разных окружений.


``target/`` --- куда всё компилируется
======================================

Сборщик ``cordjs`` результирующие файлы компиляции проекта по умолчанию кладёт в папку ``target``. Корнем проекта,
который непосредственно запускается с помощью ``node`` является именно эта папка.


``optimizer-predefined-groups.coffee`` --- помощь для продакшн-оптимизатора
===========================================================================

Это специальный файл, в котором разработчик может вручную сформировать группы модулей, которые будут объединяться
оптимизитором ``cordjs``. Подробнее об этом читайте в соответствующей главе.


``server.coffee`` --- точка входа
=================================

Файл ``server.coffee`` является "запускающим" модулем CordJS-сервера, точкой входа. Его содержание стандартное и
короткое:

.. code-block:: coffee
  :linenos:
  :caption: server.coffee

  server = require('./public/bundles/cord/core/init/nodeInit')

  publicDir = if process.argv[2]? then process.argv[2] else 'public'
  config = if process.argv[3]? then process.argv[3] else 'default'
  serverPort = process.argv[4]

  server.init publicDir, config, serverPort

В продакшн-среде CordJS-сервер запускается командой:

.. code-block:: bash

  node server.js
