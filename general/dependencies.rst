*********************************
Управление внешними зависимостями
*********************************

Практически любое приложение использует внешние готовые библиотеки. Поскольку приложение на CordJS работает как в
среде Node.js, так и в браузере, существуют особенности работы с внешними библиотеками.

На серверной стороне для подгрузки зависимостей используется пакетный менеджер `NPM <https://www.npmjs.com/>`_, а
сами библиотеки располагаются в папке ``node_modules`` в корне проекта, и, как правило, не комитятся в репозиторий
проекта.

Для браузерных зависимостей пакетный менеджер (как, например, bower) не используется. Для размещения браузерных
внешних библиотек предназначена папка ``public/vendor``. Управление этими библиотеками происходит "вручную" с
некоторыми элементами автоматизации.


npm-зависимости
===============

Все зависимости от npm-библиотек описываются в файле ``package.json`` в корне проекта. В `шаблонном проекте
<https://github.com/cordjs/example-project>`_ описаны все зависимости, требующиеся для работы ядра фреймворка. Самый
простой способ добавить новую библиотеку, выполнить команду:

.. code-block:: bash

  npm install <название пакета> --save

Она автоматически скачает нужную библиотеку и добавит её в ``package.json``. После этого, когда другой разработчик
получит новую версию ``package.json``, ему необходимо выполнить команду ``npm install`` (без аргументов), чтобы
актуализировать установленные библиотеки.

Если библиотека требуется только в режиме разработки (например, для дебага), то вместо опции ``--save`` следует
использовать ``--save-dev``.


AMD-библиотеки для работы в браузере
====================================

Для браузерных верий библиотек нет чёткой системы. Можно управлять ими двумя способами:

* Скачивать их вручную в папку ``public/vendor`` и комитить в репозиторий проекта.
* Использовать grunt-задачу, чтобы копировать браузерную версию библиотеки из npm-пакета во время вызова ``npm
  install``.

Второй способ предпочтительнее, поскольку серверная и браузерная версии автоматички синхронизируются по версии, и
внешняя библиотека не является частью исходников (не добавляется в репозиторий) проекта.

Пример того, как организовать автоматическое копирование в папку ``public/vendor``, есть в шаблонном проекте.
Обратите внимание на настройку ``postinstall`` в `package.json
<https://github.com/cordjs/example-project/blob/master/package.json#L64>`_ и файл с описанием grunt-задач
`vendors.coffee <https://github.com/cordjs/example-project/blob/master/grunt/tasks/vendors.coffee>`_.
