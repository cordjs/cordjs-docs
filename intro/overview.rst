***********************************
Обзор фреймворка и его возможностей
***********************************

Основные свойства/принципы, характеризующие CordJS
==================================================

* **Фронтенд --- отдельное приложение**, не является частью монолита, как в случае классических web-фреймворков. CordJS
  предназначен только для фронтенд-приложений.
* :abbr:`SPA (Single Page Application)` --- большинство действий пользователя не приводят к перезагрузке страницы.
* **Изоморфный** --- начальная страница рендерится на сервере, при переходах на новый экран меняется URL, но
  перезагрузки не происходит, ``F5`` работает как надо, совместимо с поисковыми роботами.
* **View-first** --- главная сущность приложения --- виджет (во многих фреймворках она называется *компонентом*) ---
  повторно используемый и относительно независимый кусок интерфейса. Всё, что видит пользователь --- виджеты. Вся
  страница --- тоже виджет. Виджеты компонуются друг с другом.
* :abbr:`MVVM (Model, View, View-Model)` --- есть слой работы с данными (Model), представление-виджет (View),
  внутреннее состояние виджета -- контекст (View Model). Но это всё с натяжкой.
* **Разметка отдельно от кода** и всё-ещё напоминает старый добрый HTML.
* **Поддерживает разработку больших приложений** посредством:

  * Системы модулей -- бандлов.
  * Поддержки частичной (on-demand) загрузки кода приложения в браузер, при этом с поддержкой умной оптимизации кода.

* **Асинхронность --- неизбежное зло.** Нужно научиться с ней дружить, а не пытаться делать вид, что её нет.
* **Promise --- добро, callback-результат --- зло!** Практически повсеместно, где есть асинхронность, в CordJS
  используется паттерн `Promise <http://www.html5rocks.com/en/tutorials/es6/promises/>`_ в противовес  принятой в
  nodejs-мире передаче callback-функции в качестве последнего аргумента. К сожалению, исторически сложилось, что
  используется доморощенная реализация промисов, а не какая-нибудь более стандартная.
* **Встроенные средства для удобной работы с REST API с поддержкой OAuth 2.0**
* **Гибкая подсистема с данными (модели и коллекции) с поддержкой автоматической синхронизации с
  представлением (виджетами)**
* **Удобный dependency injection из коробки**

Покажите мне код!
=================

Лучше один раз увидеть... Большая часть кода, который нужно писать, разрабатывая с помощью CordJS ---
разнообразные виджеты. Ниже приведён пример нескольких исходников для простой странчки с *Hello world!*.

.. code-block:: coffee
  :linenos:
  :caption: bundles/example/config.coffee

  define ->
    routes:
      '/hello/:someName':
        widget: '//HelloWorldPage'


Это конфигурационный файл :term:`бандла <бандл>` (модуля) под названием ``example``, в котором описываются *роуты* ---
правила, опредяющиие, что показывать по какому URL'у.

Обратите внимание на вызов ``define``. Все coffee-файлы начинаются с этого вызова, поскольку в CordJS используется
`асинхронная схема загрузки js-модулей <https://github.com/amdjs/amdjs-api/wiki/AMD>`_ (:abbr:`AMD (Asynchronous
Module Definition)`) посредством `RequireJS <http://requirejs.org>`_.

.. code-block:: coffee
  :linenos:
  :caption: bundles/example/widgets/helloWorldPage/HelloWorldPage.coffee

  define [
    'cord!Widget'
  ], (Widget) ->

    class HelloWorldPage extends Widget

      css: true

      @initialCtx:
        name: 'Default'

      @params:
        someName: ':ctx.name'

Непосредственно класс виджета. Здесь описано, что он принимает на вход параметр под названием ``someName`` и
автоматически записывает её в переменную контекста (внутреннее состояние виджета) с названием ``name``. Кроме того,
обозначена необходимость загрузить собственный CSS-файл виджета.

.. code-block:: html
  :linenos:
  :caption: bundles/example/widgets/helloWorldPage/helloWorldPage.html

  {#extend type="//BaseLayout" title="Hello World!!!"}
    {#inline}
      <div class="hello-world-page__text">Hello World to {name}!</div>
    {/inline}
  {/extend}

Шаблон виджета. Кроме непосредственно разметки, он задаёт структуру. В данном случае наш виджет раширяет (использует в
качестве лейаута) другой виджет, который доступен по пути ``//BaseLayout`` (в нём, скорее всего, описана базовая
разметка html-страницы с тегами ``head`` и ``body``). В шаблоне виджета ``BaseLayout`` в каком-то месте присутствует
специальная метка (placeholder), которая предназначена для вставки контента от виджетов-расширителей. В данном случае
в это место вставится содержимое раздела ``#inline`` из шаблона виджета ``HelloWorldPage``. Обратите, также, внимание
на то, как в шаблоне использована переменная контекста виджета ``name``.

.. code-block:: sass
  :linenos:
  :caption: bundles/example/widgets/helloWorldPage/helloWorldPage.styl

  .hello-world_page__
    &text
      font-size: 20rem
      text-align: center

Файл стилей виджета. В CordJS используется CSS-препроцессор stylus.
