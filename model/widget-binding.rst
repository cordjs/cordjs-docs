***************************************************************************
Использование моделей и коллекций в качестве источников данных для виджетов
***************************************************************************

Одно из важных практических предназначений слоя моделей --- синхронизация данных с их представлением. Если модель
изменилась, то должны обновиться все элементы интерфейса, которые используют её в качестве источника данных.

Такого эффекта можно добиться, если вручную подписываться на событие ``change`` моделей и коллекций в тех виджетах,
где они используются. Однако CordJS предоставляет дополнительные удобства для подобного сценария.


Авто-подписка на изменения параметров-моделей или коллекций
===========================================================

Если виджету на вход в качестве параметра передаётся экземпляр модели или коллекции, то он автоматически
подписывается на событие ``change`` этой сущности, т.е. если где-нибудь произведены изменения в модели или коллекции,
переданной в виджет в качестве параметра, то виджет немедленно об этом "узнает" --- у него сработает обработчик
соответствующего параметра, который сможет обновить его состояние, что в свою очередь приведёт к обновлению его
представления.

.. code-block:: coffee
  :linenos:

  class SomeWidget extends Widget

    @initialCtx:
      login: ''
      online: false

    @params:
      user: (userModel) ->
        @ctx.set
          login: userModel.login
          online: userModel.online

.. waring::

  Несмотря на то что можно сохранить пришедшую в параметре модель в контекст, этого делать не рекомендуется. Дело в
  том, что behaviour-класс и дочерние виджеты тоже могут быть заинтересованы в данных из этой модели. Если они тоже
  подпишутся на изменения той же модели, то в случае изменения произойдёт двойное обновление: с одной стороны они
  отреагируют на событие ``change`` модели, а с другой --- родительский виджет среагирует на него и обновить свою
  переменную контекста, что в свою очередь приведёт к срабатыванию обработчика параметра дочернего виджета или
  ``widgetEvents`` behaviour-класса ещё раз.

Модель или коллекция не могут появиться сами по себе, их где-то нужно создать. Поскольку в CordJS нет выделенной
сущности "Контроллер", то роль контроллера выполняет один из виджетов. Обычно это виджет страницы (на которую ведёт
роутер), либо какого-нибудь крупного логического блока (например, карточка пользователя). В таком виджете-контроллере
обычно и инициируются коллекции и модели, которые сохраняются в переменную контекста и автоматически передаются в
качестве параметров дочерним виджетам.

С точки зрения структурирования и целостности работы с моделями лучше всего соблюдать следующие принципы:

* Виджет, который создаёт коллекцию/модель, не должен использовать его в собственной разметке и выступать в качестве
  исключительно виджета-контроллера.

* Модификацию моделей также стоит производить в виджетах-контроллерах, в которых они инициированы.

* Если на вход в параметр виджета пришла модель или коллекция, то не следует сохранять его в контекст и передавать
  дальше, а лучше достать из него нужные сырые данные и сохранить их.


Авто-подписка в behaviour-класса (deprecated)
=============================================

Авто-подписка на событие ``change`` моделей и коллекций также работает для свойства ``@widgetEvents`` у
behaviour-класса виджета. Однако со временем стало понятно, что эта подписка в вред. Подписка на изменения
переменной контекста, которая является моделью или коллекцией крайне не рекомендуется по причинам, описанным в
предыдущем разделе.


Поддержка изоморфности
======================

Поскольку модели не являются простой структурой, а имеют сложные внутренние связи, виджет поддерживает специальную
логику сериализации/десериализации переменных контекста, которые являются моделями/коллекциями, а также
восстановления подписок на параметры-модели после серверного рендеринга и восстановления на браузере.
