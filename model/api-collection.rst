*************
API коллекции
*************

Синхронизация с сервером
========================

``sync`` --- низкоуровневая синхронизация
-----------------------------------------

После того как коллекция создана с помощью одного из методов репозитория, в неё нужно загрузить модели с
бекенд-сервера, другими словами --- синхронизировать. Только после этого она становится полезной. Основной и самый
низкоуровневый метод для запуска синхронизации --- ``sync``. Она принимает на вход три необязательных аргумента:

* *Строка* **Режим синхронизации** --- определяет то, в какой момент и как завершается промис, который возвращает метод
  ``sync``. Возможные значения: ``:sync`` (по умолчанию), ``:async``, ``:now``, ``:cache`` или ``:cache-only``.
  Подробнее о режимах ниже.

* *Целое число* **Стартовый индекс** (start) --- номер первой модели (отсчёт от нуля) в общем списке для частичной
  загрузки (как LIMIT OFFSET в SQL). Общий список определяется настройками фильтрации и сортировки коллекции.

* *Целое число* **Конечный индекс** (end) --- номер последней модели (отсчёт от нуля) в общем списке для частичной
  загрузки. Если задан старновый индекс, но не задан конечный, то загрузятся все модели, начиная от стартового индекса.

Следует понимать, что синхронизировать коллекцию можно сколько угодно раз, чтобы обновить информацию с сервера.
Коллекция считается *инициализированной* только после первой синхронизации, даже если она была частичной.

.. note::

  Возможность частичной подгрузки по диапазону индексов в общем случае не должна использоваться конечными
  разработчиками, поскольку для этого существуют более высокоуровневые методы *постраничной* подгрузки (которые внутри
  себя используют метод ``sync``). Т.е. в большинстве случаем метод вызывается только с одним аргументом или без
  аргументов.

Метод возвращает саму коллекцию (т.е. себя), завёрнутую в :term:`промис`, который резолвится в разные моменты в
зависимости от выбранного режима синхронизации:

* ``:sync`` --- произвести синхронизацию и отрезолвить результирующий промис только после завершения синхронизации,
  независимо от текущего состояния коллекции. Это самый надёжный метод получить самые актуальные данные с сервера.
  Режим ``:sync`` используется, если метод ``sync`` вызывается без аргументов.

* ``:async`` --- если коллекция проинициилизирована и в ней содержится нужный диапазон моделей (при использовании
  ``start``/``end``), то отрезовлить результат немедленно и запустить фоновую синхронизацию. Иначе, если требуемые
  данные не загружены ни разу, поведение как при ``:sync``.

* ``:now`` --- запустить фоновую синхронизацию, отрезолвить результат немедленно, независимо от текущего состояния
  коллекции (т.е. в коллекции может не оказаться загруженных данных).

* ``:cache`` --- если в локальном кеше есть требуемые данные, то загрузить их и отрезолвить результирующий промис, не
  запуская синхронизации. Иначе, если в кеше нет данных, поведение как при ``:sync``.

* ``:cache-only`` --- как ``:cache``, но если данных в кеше нет, то отреджектить результирующий промис (ошибка) и не
  запускать синхронизацию.


``isInitialized`` --- проверка синхронизированности коллекции
-------------------------------------------------------------

Возвращает ``true``, если коллекция хотя бы раз синхронизирована после создания.


Постраничная синхронизация
==========================

Одна из важных возможностей коллекций --- возможность загружать данные с сервера постранично. Это очень полезно для
работы с большими наборами данных.

Для того, чтобы включить возможность постраничной загрузки, нужно при создании коллекции указать ненулевой параметр
``pageSize``, который определяет размер одной страницы. Нумерация страниц начинается с 1 (единицы). Есть возможность
подгружать страницы как с первой, так и с "середины".

Загруженные страницы в коллекции всегда представляют собой непрерывный диапазон. Например, если сначала была
запрошена первая страница, а затем --- пятая, то будут загружены также страницы со второй по четвёртую.


``getPage`` --- получить модели заданного диапазона страниц
-----------------------------------------------------------

Метод возвращает завёрнутый в промис список моделей в соответствии с заданным диапазоном страниц. Если нужные
страницы уже загружены, то используются уже загруженные модели (без синхронизации). Если хотя бы одна из нужных
страниц не загружена, то происходит синхронизация всего заданного диапазона в режиме ``:async``.

Метод принимает два аргумента (обязательный только первый):

* *Натуральное число* **firstPage** --- номер первой страницы диапазона. Если второй аргумент не задан, то
  загружается только эта страница.

* *Натуральное число* **lastPage** --- номер последней страницы диапазона.


``getPagingInfo`` --- мета-информации о постраничной загрузке
-------------------------------------------------------------

Расчитывает и возвращает полезную мета-информацию для работы с постраничной загрузкой. Принимает два необязательных
аргумента:

* *Число* ``selectedId`` --- идентификатор "выбранной" модели, относительно которой нужно расчитать некоторые поля
  результата (см. ниже).

* *Булево* ``refresh`` --- не использовать данные из кеша, форсировать актуализацию с сервера. По умолчанию выключено.

Результат метода --- завёрнутый в промис объект со следующими полями:

* ``total`` --- общее количество моделей в коллекции.
* ``pages`` --- общее количество страниц в коллекции (с учётом параметра ``pageSize``).
* ``selected`` (только если задан ``selectedId``) --- индекс модели с заданным ID в общем списке моделей коллекции
  (отсчёт с нуля).
* ``selectedPage`` (только если задан ``selectedId``) --- номер страницы, в которую входит модель с заданным ID.


``partialRefresh`` --- оптимизированное обновление для больших коллекций
------------------------------------------------------------------------

.. todo::

  Автор: Белобров.


``refresh`` --- обновить записи коллекции вокруг заданной модели
----------------------------------------------------------------

.. todo::

  Автор: Белобров.


Методы доступа к моделям
========================

``get`` --- получить модель по ID
---------------------------------

Синхронно возвращает модель по заданному ID. Должен вызываться после синхронизации. Если модель в коллекции
отсутствует или нужная страница не синхронизирована, то бросает исключение.


``have`` --- проверка наличия модели по ID
------------------------------------------

Проверяет наличие загруженной модели в коллекции по ID. Возвращает ``true`` если модель с заданным ID есть в
коллекции и загружена.


``toArray`` --- получить текущий список моделей
-----------------------------------------------

Синхронно возвращает массив загруженных моделей коллекции. Этот метод не стоит использовать для постраничных
коллекций, поскольку он вернёт только модели из диапазона загруженных в данный момент страниц, что может быть
довольно непредсказуемым поведением. Для постраничных коллекций лучше использовать асинхронный метод ``getPage``.


Другие полезные методы
======================

``on`` --- подписка на события коллекции
----------------------------------------

Коллекция реализует интерфейс EventEmitter, соответственно можно подписываться (и не забывать отписываться) на её
события. Самое полезное событие --- ``change`` --- возникает, если в коллекции появились или догрузились новые
модели, удалились модели или изменилась любая модель.

.. _models-api-addModel:

``addModel`` --- добавить модель в коллекцию "вручную"
------------------------------------------------------

Вручную добавляет модель в начало или конец коллекции. Метод полезен для коллекций, управляемых внучную (не
синхронизируемых с сервером). Метод принимает 2 аргумента:

* *Модель* ``model`` --- добавляемая модель.
* *Строка* **position** --- куда добавлять: в начало --- ``:head``, в конец --- ``:tail``. По умолчанию ``:tail``.

Метод полностью синхронен и ничего не возвращает.


``euthanize`` --- удаление коллекции из репозитория и кешей
-----------------------------------------------------------

Метод позволяет удалить ссылки на коллекцию из репозитория и закешированные данные. Это почти уничтожение коллекции.
Но если какой-нибудь виджет сохранил ссылку на коллекцию, то он сможет с ней работать. Метод не принимает аргументов
и возвращает промис по результатам инвалидации кешей (это асинхронная операция).


``cache`` --- локально закешировать текущее состояние коллекции
---------------------------------------------------------------

Кеширование коллекции происходит автоматически, но иногда требуется форсировать сохранение в кеш именно текущей
версии. Для этого можно явно вызвать метод ``cache``. Метод не принимает аргументов и возвращает промис с булевым
значением ``true``, если кеширование произошло, и ``false``, если кеширование не произошло (например, потому что
метод вызван на сервере, где кеширование не работает в принципе).


``invalidateCache`` --- очистить кеш коллекции
----------------------------------------------

Метод форсирует немедленное очищение локального кеша коллекции. Под локальным кешем подразумевается хранилище
браузера, в котором данные сохранятся даже после перезагрузки страницы, а не загруженные в живую коллекцию данные.
Работа с локальным кешем асинхронная, поэтому возвращается промис по результатам операции очистки.
