****************************************************
Оптимизация --- подготовка проекта к продакшн-деплою
****************************************************

Подготовка собранного проекта к продакшн-режиму состоит из двух этапов:

* Объединение js- и css- файлов в большие группы (по одному файлу на группу) по принципу релевантности (частоте
  использования друг с другом). Объединение приводит к резкому сокращению количества запросов от браузера за
  статическими файлами исходников.

* Минификация/обфускация полученных больших файлов с целью уменьшения размера и скрывания исходных кодов (для
  некоторых коммерческих проектов). Обфускация js-файлов осуществляется с помощью `UglifyJS
  <http://lisperator.net/uglifyjs/>`_, а css-файлов --- с помощью `clean-css
  <https://github.com/jakubpawlowicz/clean-css>`_.

И то и другое осуществляет команда ``cordjs optimize``. Она должна выполняться после полной сборки проекта (команды
``cordjs build``). Результаты своей работы она кладёт в специальную папку ``target/public/assets/z`` --- много js- и
css-файлов групп с нечитаемыми названиями (sha1).

.. note::

  Оптимизация касается только работы браузерной части. Серверная часть CordJS работает на базовых исходниках, т.к.
  подобного рода оптимизация для Node.js-проекта не имеет никакого смысла.

Несмотря на то что команда ``cordjs optimize`` оперирует исключительно уже собранными исходниками (в папке ``target``),
запускается она, так же как и другие команды ``cordjs``, из корня проекта.


Опции команды ``optimize``
==========================

Опции команды ``cordjs optimize`` во многом совпадают с опциями команды :ref:`build <cli-build>`, но не всегда
совпадают по смыслу:

* ``-o, --out <dir>`` --- директория, в которую будет осуществляться сборка проекта. По умолчанию это папка
  ``target`` в корне проекта. Директория задаётся относительно корня проекта. Использовать эту опцию и изменять папку
  по умолчанию не рекомендуется.

* ``-C, --clean`` --- очистить папку ``target/public/assets/z`` перед тем, как начать оптимизацию. Полезна, если
  команда ``optimize`` выплняется несколько раз подряд после изменения исходников, чтобы в папке не накапливался
  мусор.

* ``--disable-css`` --- выключить оптимизацию для CSS. По умолчанию включена. Опция может быть полезна, если есть
  подозрения в багах, вызванных объединением файлов.

* ``--disable-css-minify`` --- выключить минификаци/обфускацию объединённых CSS-файлов. Может быть полезно, если есть
  подозрения в ошибках, вызванных минификацией, либо разработчику необходимо видеть исходные имена css-классов при
  отладке. По умолчанию минификация включена.

* ``--disable-js`` --- выключить оптимизацию для JS-файлов. По умолчанию включена.

* ``--disable-js-minify`` --- выключить минификацию/обфускацию объединённыъ JS-файлов. Может быть полезно, если есть
  подозрения в ошибках, вызванных использованием UglifyJS, либо для облегчения отладки. По умолчанию минификация
  включена.

* ``--remove-sources`` --- удалить все исходные js- и css-файлы, включённые в группы при оптимизации. Использовать
  эту опцию можно только для сборок SPA-приложений с index.html, поскольку серверная версия после её использования
  работать не сможет. Вместо применения этой опции, лучше использовать команду ``purgeOptimizedSources``.


``purgeOptimizedSources`` --- зачистка необфусцированных исходников
===================================================================

Команда ``cordjs purgeOptimizedSources`` выполняет очисту необфусцированных исходников тех файлов, которые попали в
оптимизированные группы. Её следует вызывать после выполнения ``cordjs optimize`` (без опции ``--remove-sources``).
Команда поддерживает только одну опцию ``-o, --out``.
