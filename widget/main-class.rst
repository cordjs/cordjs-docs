*********************
Главный класс виджета
*********************

Главный класс виджета является единственным обязательным артифактом виджета. Он должен располагаться в файле, который
называется так же, как и папка виджета, но с заглавной буквы. Сам класс тоже должен называться как файл и
наследоваться от класса ``/cord/core/Widget`` или класса другого виджета.

Главный класс виджета является экслюзивным владельцем его состояния, отвечает за рендеринг шаблона и публичное API
виджета. Он участвует как в серверном рендеринге, так и на стороне клиента (браузере).

Типичный класс виджета выглядит вот так:

.. code-block:: coffee
  :linenos:
  :caption: public/bundles/hello/example/widgets/currentTime/CurrentTime.coffee

  define [
    'cord!Widget'
  ], (Widget) ->

    class CurrentTime extends Widget

      @inject: ['api']

      css: true
      cssClass: 'b-current-time'

      @initialCtx:
        time: '00:00:00'
        city: 'Moscow'

      @params:
        city: ':ctx'


      onShow: ->
        @updateTime()


      # Публичный метод
      updateTime: ->
        @ctx.set('time', @api.get('/local-time-for-city', city: @ctx.city))


Внедрение зависимостей (Dependency Injection)
=============================================

Для внедрения других сервисов как зависимостей в виджет (так же как и для других классов в CordJS) используется
статическое свойство ``@inject``. В CordJS применяется injection через свойства объекта, а не через конструктор.
Свойство ``@inject`` может быть задано в одном из трёх форматов:

* **Массив строк** --- список названий сервисов, которые нужно внедрить. Сервисы будут присвоены одноимённым свойствам
  экземпляра виджета.
* **Объект**, ключи которого используются как названия свойств (алиасы) в виджете, а значения --- названия сервисов,
  которые нужно внедрить под этими алиасами.
* **Функция**, которая (синхронно) возвращает один из двух предыдущих форматов.


Переменные контекста
====================

Для хренения своего внутреннего состояния (View-Model) виджет использует специальный объект класса ``Context`` в
переменной ``@ctx``. Структура данных внутреннего состояния ничем не ограничена, однако у виджета предусмотрено
специальное статическое свойство ``@initialCtx`` для установки значений по-умолчанию для переменных контекста и
рекомендуется перечислять в нём **все** возможные переменные. Таким образом разработчик может документировать
структуру внутреннего состояния виджета, и другим программистам будет проще понять логику его работы.

Свойство ``@initialCtx`` может быть либо объектом, ключи которого являются названями переменных контекста, а значения
--- значениями по-умолчанию, либо функцией, которая (синхронно) возвращает такой объект. Функция выполняется в
контексте **класса** виджета, поэтому в ней не доступны свойства и методы экземпляра виджета, такие как внедрённые
сервисы. Пример:

.. code-block:: coffee
  :linenos:

  @initialCtx: ->
    time = new Date

    time: time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds()
    city: 'Moscow'

.. warning::

  В качестве значений по умолчанию можно задавать любые скалярные выражения, а также массивы или объекты первого
  порядка (т.е. которые не содержат в себе других массивов или объектов).

  Это обусловлено тем, что без дополнительной обработки разные экземпляры виджета одного класса ссылались бы на один
  и тот же массив или объект по-умолчанию, что может приводить к неожиданным последствиям. CordJS делает
  поверхностный клон массивов и объектов при создании экземпляра виджета, поэтому массивы и объекты первого порядка
  допустимы.

  В большинстве случаев в качестве значения по умолчанию используют пустой массив или объект, чтобы
  обозначить тип переменной.

В переменные контекста не следует записывать фукнции или какие-либо сложные типизированные объекты (за исключением
поддерживаемых в CordJS моделей и коллекций), поскольку при серверном рендеринге контекст сериализуется, передаётся
по сети в браузер и восстанавливается. CordJS не умеет передавать таким образом функции и сложные объекты.

.. note::

  Есть зарезервированные названия, которые нельзя использовать в качестве переменных контекста (из-за особенностей
  работы Dust.js): ``css``, ``deferred``, ``i18n``, ``placeholder``, ``url``, ``widget`` и ``widgetInitializer``.

Подробнее API работы с контекстом описано в соответствующем разделе.


Обработка входящих параметров
=============================


Работа с асинхронным состоянием
===============================


CSS-аспекты
===========

Объявление CSS-зависимостей
---------------------------


CSS-класс корневого элемента
----------------------------


Работа с дочерними виджетами
============================


Подписка на события дочерних виджетов
-------------------------------------


Свойство ``behaviuorClass``
===========================


Публичные API-методы
====================

